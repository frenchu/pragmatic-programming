[{"categories":["backend","qa"],"contents":"What\u0026rsquo;s changed in the new version\n  Source: Pexels\n  Intro In my previous article I described how my team solved different issues faced while implementing test cases in Kotlintest, the testing library for Kotlin. Recently there was a major release of that library. Let\u0026rsquo;s see what has been changed and what steps to take in order to make use of the newest version of the library.\nWhat\u0026rsquo;s your name, Kotlintest? The most obvious change in the library is its name. The name was changed to Kotest, because of too much similarity with JetBrains kotlin.test package.\nI started the migration from updating project dependencies. Current version of the library is 4.0.2. In addition to changing group name and module name, I had to add one more dependency for core assertions. Moreover, module names are suffixed with \u0026ldquo;-jvm\u0026rdquo;.\n Please bear in mind that if you are using Kotlintest gradle plugin, its name currently is the same as before.\nWhere the heck are all the assertions and specs? Kotest creators restructured the project quite a bit. A lot of classes and functions changed their locations in packages. So the next step of the migration is to fix the imports. Spec types now resides in io.kotest.core.spec.style and functions like should, shouldBe, shouldNot were moved to io.kotest.matchers package. While assertSoftly can be found in package named io.kotest.assertions.\nI think what you can do to deal with it quick, is to find and replace in the project scope:\nio.kotlintest.specs -\u0026gt; io.kotest.core.spec.style io.kotlintest.should -\u0026gt; io.kotest.matchers.should io.kotlintest.assertSoftly -\u0026gt; io.kotest.assertions.assertSoftly io.kotlintest.TestCase -\u0026gt; io.kotest.core.test.TestCase For sure there are more changes like these, but for me it was enough.\nProject config In the Kotest 4.0 we don\u0026rsquo;t need to put project configuration class in the special package like it was before. Instead of having project config in io.kotlintest.provided we can now create configuration class wherever we want. Kotest will automatically scan classpath to find it. Important note is that ProjectLevelConfig class has been removed. I used more general Extension interface to fill the gap.\n Last but not least Finally, I needed to update the kotlin language version. There was problem in the runtime. Definition of class kotlin.time.MonotonicTimeSource could not be found. Kotest is using experimental kotlin features for profiling and measuring time of test execution. I used the latest version of kotlin language and it fixed the issue.\nWhat about fixes? I did\u0026rsquo;t have chance to take a closer look, but I\u0026rsquo;ve noticed that arrow dependency issue our team had to deal with has been now resolved. ðŸŽ‰\n","permalink":"https://pawelweselak.com/posts/kotest-migration-guide/","tags":["kotlintest","kotest","kotlin","jvm"],"title":"Kotest 4.0 migration guide"},{"categories":["backend","qa"],"contents":"Common pitfalls and how to deal with them\n  Author: Mateusz Dach, Source: Pexels\n  Intro Our team currently started cruise to develop next version of â€˜the API\u0026rsquo; and new set of services emerged during that journey. We have free hand to sail to the open waters of technologies ocean, so can choose the best fit to our project. Our ship wharfed to island named kotlin language. Very quickly we discovered Kotlintest library on this island. When fighting the battle of writing test cases to our production code we had a mutiny incited by Kotlintest. In this article I want to describe the course of the rebellion and how our brave team suppressed it.\nWhy Kotlintest at all? In terms of writing tests in kotlin you have several test libraries to choose. The most common are Spek, JUnit5 (preferably with some assertion library like AssertJ or HamKrest) and ofcourse Kotlintest. As you probably already anticipated, in our project we decided to use Kotlintest. The authors of the library are inspired by test library for Scala - Scalatest. Our team promote functional programming, so do Kotlintest. The library has many useful features like different styles of writing test specifications, soft assertions or data-driven testing. It is also quite popular in the community, actively developed and well supported.\nMinor but persistent There are few annoying things about Kotlintest. First of all, integration with IntelliJ - the IDE which we use on daily basis, is not so good. It is impossible to execute test case of ones choice from test specification. I tried official IntelliJ plugin with no avail. Thanks to my project manager I realised that the plugin to run things smoothly requires some additional configuration. And it wasn\u0026rsquo;t straightforward for me. To set it up, first install plugin named Kotlintest. After that if you are using gradle in IntelliJ preferences under Build, Execution, Deployment \u0026gt; Build Tools \u0026gt; Gradle select Run tests using: IntelliJ IDEA. Then upon running a test, you can choose to run it with the Kotlintest plugin. If it doesn\u0026rsquo;t work try to use Restart/Invalidate cache option.\nBefore the moment I started using Kotlintest plugin, I had found in the documentation mention about prefixing test case with \u0026ldquo;f:\u0026quot;. It should do the trick as it is done in popular JavaScript libraries. Prefix \u0026ldquo;f:\u0026rdquo; means focused here. Unfortunately this tip doesn\u0026rsquo;t work well. Neither standard IntelliJ runner nor Gradle will execute any tests if I try to focus some test case. IntelliJ informs that there are no tests received.\n Surprisingly bang tests with exclamation mark \u0026ldquo;!\u0026rdquo; works. It excludes the test case from running. So if want to focus some test case I just exclude all the others. :P\n Again this feature works perfectly fine with the kotlintest plugin. This can be solved also by adding Kotlintest gradle plugin to your project. Please compare GitHub issue.\nDuplicated test name There are more issues which will lead to situation where tests should be executed, but they don\u0026rsquo;t. It is a serious problem when a test actually should fail. We observed that behaviour when the name of the test case method was duplicated by mistake. Any test case of the specification sadly didn\u0026rsquo;t run. It lead to situation where the whole build is green, but actually it isn\u0026rsquo;t. The problem was masked and not easy to spot.\n The root cause of the issue was the tiny dependency hell we had in the project. ;) To be more precise, kotlin depends on arrow-core-data in version 0.9.0 while our project uses arrow 0.10.x. It leads to replacement of arrow-core-data version on which Kotlintest is dependent.\n When Spring eventually comes\u0026hellip; Similar issue we could encounter while running integration tests with Spring. When creation of spring context is failed then none of the test cases is executed from the test. The same as in previous issue this leads to falsely green build and it is hard to notice. The cause of the issue was the same as in Duplicated test name.\nOne digression on testing with Spring. We don\u0026rsquo;t like much autowiring lateinit var variables approach. Mutable state is not something we want to have in our functional code even if it is in tests. Hopefully Kotlintest allows to wiring through constructor of test spec. To enable that Spring project extension needs to be added to the project. This approach has some drawback although. The project listeners/extension are executed before test listeners. So if you have any test setup that spring context creation depends on you cannot put it in test listeners. In that case we use spring test context configuration with post construct and post destroy lifecycle methods. In the last resort one can go back to autowired lateinit vars.\nStrange behavior Talking about test listeners there is one thing worth to mention. If you take advantage of BehaviorSpec, most likely you want to run test listener methods before and after whole given/when/then test case. Use isTopLevel method, otherwise afterTestCase and beforeTestCase methods will execute not only on given, but also on when and then blocks.\n Other strange thing is the way how tests results are reported in IntelliJ after running gradle test task. Only Then names are listed on the report. So if you have several Thens labeled the same way in your Test specification, it it is not easy distinguish them. Problem can be solved with Kotlintest plugin. Running the tests using this plugin will show nested structure of given/when/then on the report.\nOne can complain about tree-like structure of BehaviorSpec. Actually it is a definite advantage of the library. Thanks to that kotlin compiler itself can check the right order of clauses. In JUnit you can put labels or comments, but they don\u0026rsquo;t have any meaning. While in Spock, a test library for Groovy, checking of labels order is added by the library.\nAre you still hiding something from me, Kotlintest? Please be careful when you are going to use AssertSoftly. Normally all assertions in the assert softly block will be executed even if the first one fails. Dear reader can meet yet another concealed troubles there. Assert softly works well with Kotlintest matchers. But if you want to combine other testing tools like reactor-test for example, they most likely throw some kind of AssertionException when assertion fails. It will cause that assert softly block will be interrupted. If you don\u0026rsquo;t always follow TDD completely you may not notice this \u0026ldquo;feature\u0026rdquo; at the first place.\n To avoid that you probably want to implement your custom matchers. In your matcher you can catch AssertionException in the overridden test method. Then return boolean indicating success or failure of the assertion.\n Another annoying thing is related with .config method usage. In behavioral tests it is defined for then but not for Then method. I like starting test level names with capital letter since when is reserved keyword in kotlin. In order compile your code, you need to put it in backticks: `when`. So instead of given, `when`, then one can use Given, When, Then. Except you want to add config to the test, in this case you have to use Given, When, then which looks silly.\n Summary Is our journey with Kotlintest over? I hope not. Probably we will discover even more issues, but despite its peculiarities Kotlintest is a promising library. The development is very active and the releases are coming quite frequently. We optimistically see the future of the library. In the upcoming release library is changing name from Kotlintest to Kotest. Beta versions for the 4.0.0 release are already available. In the next article I will describe migration steps needed. And also I will check if the above issues has been fixed.\nHow about you? I strongly encourage you to check the library on your own. Maybe you have some other solutions to share? Feel free to post your comment below the article.\nComplete project with code samples is available on my GitHub.\n  Source: Pexels\n  ","permalink":"https://pawelweselak.com/posts/kotlintest-adventures/","tags":["kotlintest","kotlin","jvm"],"title":"Kotlintest adventures"},{"categories":["tools"],"contents":"Intro During the years of experience with git I have noted aside many commands which could be useful. In this article I present the most frequently used git commands and also configuration steps I always follow in a new work environment.\nConfiguration   User information\n $ git config --global user.name \u0026quot;Weselak, Pawel\u0026quot; $ git config --global user.email \u0026quot;nospam@pawelweselak.com\u0026quot;    SSH keys\n $ ssh-keygen -t rsa -b 4096 -C \u0026quot;nospam@pawelweselak.com\u0026quot; $ eval \u0026quot;$(ssh-agent -s)\u0026quot; $ ssh-add ~/.ssh/id_rsa    safe pull settings\n $ git config --global pull.rebase true $ git config --global pull.ff only    clear out local repo from deleted branches\n $ git config --global fetch.prune true    apply resolved conflicts to remaining rebase steps\n $ git config --global rerere.enabled true    push only the current branch\n $ git config --global push.default simple    fix line breaks on Windows\n $ git config --global core.autocrlf true    Typical git flow   Clone remote repository to your local box\n $ git clone git@github.com:frenchu/hugo-coder.git    Add another remote\n $ git remote add --track master upstream git@github.com:luizdepra/hugo-coder.git    Get changes from the remote\n $ git fetch upstream $ git merge upstream/master  or\n $ git pull upstream    Create topic branch\n $ git branch feature/add-readme $ git checkout feature/add-readme  or\n $ git checkout -b feature/add-readme  info about the branch\n $ git branch $ git branch -a $ git branch -vv    Commit\n $ git status $ git add . $ git status $ git commit -m \u0026quot;README.md file added\u0026quot;  optionally edit your commit if you made a mistake\n $ git commit --amend -m \u0026quot;README.md and License files added\u0026quot;  if you want to keep existing commit message do\n $ git commit --amend --no-edit  if you need to undo three commits type\n $ git reset --soft HEAD~3  or use rebase to interactively edit commits\n $ git rebase -i HEAD~3    Push\n $ git push origin feature/add-readme  to set upstream for feature pushes do\n $ git push -u origin feature/add-readme    Usefull commands   stash/unstash\n $ git stash $ git stash pop    undo last commit\n $ git reset --soft HEAD~1    reset local to remote branch\n $ git fetch origin $ git reset --hard origin/branch    rename local branch\n $ git branch -m \u0026lt;oldname\u0026gt; \u0026lt;newname\u0026gt;    push with tags\n $ git push --follow-tags origin master    push to another branch\n $ git push origin develop:feature/FR2019_spin_off    remove remote branch\n $ git push origin --delete \u0026lt;branch_name\u0026gt;    squash two last commits\n $ git reset --soft HEAD^ $ git commit --amend    fix last commit with editing commit message\n $ git commit --amend --no-edit    editing previous commits\n $ git rebase -i HEAD~3 # Three commit before $ git rebase --interactive 'bbc643cd^' # Or starting from given hash $ git commit --all --amend --no-edit $ git rebase --continue    change the author of the commit\n $ git commit --amend --author=\u0026quot;New Me \u0026lt;new@gmail.com\u0026gt;\u0026quot;    edit first commit\n $ git rebase -i --root    move recent commits to new branch\n $ git branch new_branch $ git reset --hard HEAD~3 $ git checkout new_branch    move recent commits to existing branch\n $ git checkout feature $ git merge master $ git checkout master $ git reset --hard HEAD~1    pull without checkout\n $ git fetch origin master:master    prune / clean-up\n $ git remote prune origin $ git fetch -p \u0026amp;\u0026amp; git branch -vv | awk '/: gone]/{print $1}' | xargs git branch -D    Additional info  aliases for git pull/up  ","permalink":"https://pawelweselak.com/posts/git-cheatsheet/","tags":["git","git flow"],"title":"Git cheatsheet"},{"categories":["backend"],"contents":"","permalink":"https://pawelweselak.com/posts/eip-frameworks-comparison/","tags":["spring","spring-integration","apache-camel","service integration"],"title":"Popular EIP frameworks comparison"},{"categories":["backed"],"contents":"","permalink":"https://pawelweselak.com/posts/spring-batch-example/","tags":["spring","spring-batch","data store"],"title":"Spring Batch air pollution measurements example"},{"categories":null,"contents":"My name is PaweÅ‚ Weselak. I\u0026rsquo;m the founder of \u0026ldquo;PaweÅ‚ Weselak pragmatyczne programowanie\u0026rdquo; company registered in Poland. I have over 10 years of experience in programming around JVM stack. In my work and personal life I follow pragmatic approach for solving problems.\nClean code advocate. Blockchain and cryptocurriencies enthusiast. Passionate about world economy and geostrategy.\nFeel free to contact me on LindedIn.\n","permalink":"https://pawelweselak.com/about/","tags":null,"title":"About me"},{"categories":null,"contents":"PWMS \u0026ndash; Porfolio Wealth Management System Porfolio Wealth Management System is web service allowing private investors to monitor their investments. PWMS supports different types of assets like cash, stocks, cryptocurriencies.\n","permalink":"https://pawelweselak.com/projects/","tags":null,"title":"Projects"},{"categories":null,"contents":"","permalink":"https://pawelweselak.com/search/","tags":null,"title":"Search Results"}]